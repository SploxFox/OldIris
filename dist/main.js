!function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=new(n(1).Iris)(window.location.hash.substr(1));function s(){window.scrollTo(0,1)}document.body.appendChild(r.element),window.addEventListener("touchmove",s),s()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),s=n(3),i=n(4);t.Iris=class{constructor(e){this.touchStarted=!1,this.userInterface=new i.UserInterface,this.visuals=new s.Visuals,this.storyManager=new r.StoryManager(e),this.storyManager.currentCue.speech||this.storyManager.goToNextSpeech(),this.element=document.createElement("div"),this.element.classList.add("game");var t=document.createElement("div");t.classList.add("interface-wrapper"),t.appendChild(this.userInterface.textBox.element),this.element.appendChild(t),this.userInterface.textBox.showText(this.storyManager.currentCue.character,this.storyManager.currentSpeech),window.addEventListener("touchstart",function(){this.advance(),this.touchStarted=!0}.bind(this)),window.addEventListener("click",function(){this.touchStarted?this.touchStarted=!1:this.advance()}.bind(this))}advance(){this.storyManager.goToNextSpeech(),this.userInterface.textBox.showText(this.storyManager.currentCue.character,this.storyManager.currentSpeech)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.StoryManager=class{constructor(e){this.currentEpisodePosition=0,this.currentChapterPosition=0,this.currentCuePosition=0,this.currentSpeechPosition=0,this._currentEvidence=[];var t=new XMLHttpRequest;t.open("GET",e,!1),t.send(null),console.log(t.responseText),this.story=JSON.parse(t.responseText),console.log(this.story)}get currentSpeech(){var e=this.story.episodes[this.currentEpisodePosition].chapters[this.currentChapterPosition].content[this.currentCuePosition].speech[this.currentSpeechPosition];return console.log(e),e}get currentCue(){var e=this.story.episodes[this.currentEpisodePosition].chapters[this.currentChapterPosition].content[this.currentCuePosition];if(null==e)throw"Error: Found cue to be undefined!";return e}get currentChapter(){return this.story.episodes[this.currentEpisodePosition].chapters[this.currentChapterPosition]}get currentEpisode(){return this.story.episodes[this.currentEpisodePosition]}get currentEvidence(){return this._currentEvidence}register(){this.currentCue.newevidence&&this._currentEvidence.push({name:this.currentCue.name,id:this.currentCue.newevidence,image:this.currentCue.image?this.currentCue.image:"https://previews.123rf.com/images/iqoncept/iqoncept0901/iqoncept090100094/4221417-a-white-wrinkled-piece-of-paper-background-for-slides-brochures-and-presentations-.jpg"})}advance(){this.currentCue.speech&&this.currentCue.speech.length-1>this.currentSpeechPosition?(this.currentSpeechPosition++,console.log("Advanced to next speech. New position: "+this.currentSpeechPosition)):this.currentChapter.content.length>this.currentCuePosition?(this.currentCuePosition++,this.currentSpeechPosition=0,console.log("Advanced to next cue.")):this.currentEpisode.chapters.length>this.currentChapterPosition&&(this.currentChapterPosition++,this.currentSpeechPosition=0,this.currentCuePosition=0,console.log("Advanced to next chapter."))}goToNextSpeech(){do{this.register(),this.advance()}while(!this.currentCue.speech)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Visuals=class{constructor(){this.canvas=document.createElement("canvas"),this.canvas.classList.add("visuals"),this.context=this.canvas.getContext("2d"),this.context.rect(10,10,20,20)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(5),s=n(6);t.UserInterface=class{constructor(){this.textBox=new r.TextBox,this.courtRecord=new s.CourtRecord}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(){this.element=document.createElement("div"),this.element.classList.add("text","text-box"),this.speakerElement=document.createElement("span"),this.speakerElement.classList.add("name"),this.textElement=document.createElement("div"),this.textElement.classList.add("text-block"),this.element.appendChild(this.speakerElement),this.element.appendChild(this.textElement)}clear(){for(;this.textElement.firstElementChild;)this.textElement.firstElementChild.remove();this.speakerElement.textContent="",this.blipNum=0,this.isFinished=!1}showText(e,t){this.clear(),this.speakerElement.textContent=e;var n="fast",s="speech",i=function(e){if("#"!=t[e]||"#"!=t[e+1])return{character:t[e],mode:s,speed:n,index:e};try{for(var r="",i=e+2;"("!=t[i]&&t.length>i;i++)r+=t[i];for(var o,c="",a=i+1;")"!=t[a]&&t.length>a;a++)c+=t[a];switch(o=c.split(","),r){case"mode":s=o[0];break;case"speed":n=o[0]}return{index:a}}catch(e){console.log("Unable to parse command!"),console.log(e)}}.bind(this);for(var o=0;o<t.length;o++){var c=i(o);if(r.instanceOfQueuedCharacter(c)){var a=document.createElement("span");a.classList.add("text",s,"hidden"),a.textContent=t[o],a.dataset.index=""+o,this.textElement.appendChild(a)}else o=c.index}(function e(s){window.setTimeout(function(){if(s<t.length){var n=i(s),o=n.index+1;r.instanceOfQueuedCharacter(n)&&this.addChar(n),e.bind(this)(o)}}.bind(this),r.getWaitTime(n))}).bind(this)(0)}static getWaitTime(e){switch(e){case"fast":return 20;case"slow":return 50;case"very-slow":return 200}}static instanceOfQueuedCharacter(e){return void 0!==e.character}addChar(e){document.querySelector("[data-index='"+e.index+"']").classList.remove("hidden");this.blipNum++," "==e.character&&(this.blipNum=0)}}t.TextBox=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CourtRecord=class{constructor(){this.element=document.createElement("div"),this.element.classList.add("court-record","text")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,